
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { ExtendedDatabase } from './auth-tables-types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Supabase URL e/ou chave an√¥nima n√£o definidas nas vari√°veis de ambiente.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<ExtendedDatabase>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Desativado para evitar redirecionamento autom√°tico na p√°gina de ativa√ß√£o
    flowType: 'implicit', // Usar flow impl√≠cito para maior compatibilidade
    debug: process.env.NODE_ENV === 'development', // Habilitar debug apenas em desenvolvimento
    // Configura√ß√µes adicionais para melhorar a estabilidade
    refreshThreshold: 60, // Refresh token 60 segundos antes de expirar
    retryAttempts: 3, // Tentativas de retry para requests falhados
  },
  global: {
    headers: {
      'X-Client-Info': 'lovable-auth-client'
    }
  }
});

// Interceptor para capturar erros de refresh token
if (typeof window !== 'undefined') {
  // Adicionar listener para erros de rede
  window.addEventListener('unhandledrejection', (event) => {
    const error = event.reason;
    
    // Verificar se √© um erro de CORS ou refresh token
    const isCorsError = error?.message?.includes('CORS') || 
                       error?.message?.includes('Access-Control-Allow-Origin') ||
                       error?.message?.includes('Failed to fetch');
    
    const isRefreshTokenError = error?.message?.includes('refresh_token') || 
                               error?.message?.includes('isExpired') ||
                               error?.message?.includes('400') ||
                               error?.message?.includes('401');
    
    if (isCorsError || isRefreshTokenError) {
      console.warn('üîÑ Auth error intercepted:', {
        type: isCorsError ? 'CORS' : 'Refresh Token',
        error: error?.message,
        url: error?.url
      });
      
      // Limpar sess√£o local em caso de erro de refresh token
      try {
        const storageKey = 'sb-' + SUPABASE_URL.split('//')[1].split('.')[0] + '-auth-token';
        localStorage.removeItem(storageKey);
        console.log('üßπ Local session cleared due to auth error');
        
        // Tamb√©m limpar outros itens relacionados ao Supabase
        Object.keys(localStorage).forEach(key => {
          if (key.includes('supabase') || key.includes('sb-')) {
            localStorage.removeItem(key);
          }
        });
      } catch (error) {
        console.error('‚ùå Error clearing local session:', error);
      }
      
      // Redirecionar para login se necess√°rio
      if (window.location.pathname !== '/login' && 
          window.location.pathname !== '/auth' && 
          window.location.pathname !== '/activate-account') {
        console.log('üîÑ Redirecting to login due to auth error');
        window.location.href = '/login';
      }
    }
  });
  
  // Removido interceptor de fetch que estava causando problemas de CORS
}

// Fun√ß√£o para limpar sess√£o manualmente
export const clearAuthSession = () => {
  if (typeof window !== 'undefined') {
    try {
      const storageKey = 'sb-' + SUPABASE_URL.split('//')[1].split('.')[0] + '-auth-token';
      localStorage.removeItem(storageKey);
      
      // Limpar todos os itens relacionados ao Supabase
      Object.keys(localStorage).forEach(key => {
        if (key.includes('supabase') || key.includes('sb-')) {
          localStorage.removeItem(key);
        }
      });
      
      console.log('üßπ Auth session cleared manually');
    } catch (error) {
      console.error('‚ùå Error clearing auth session:', error);
    }
  }
};

// Fun√ß√£o para verificar se h√° problemas de CORS
export const checkCorsIssues = async () => {
  try {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/user`, {
      method: 'GET',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${localStorage.getItem('sb-' + SUPABASE_URL.split('//')[1].split('.')[0] + '-auth-token')}`
      }
    });
    
    if (!response.ok) {
      console.warn('‚ö†Ô∏è CORS check failed:', response.status, response.statusText);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå CORS check error:', error);
    return false;
  }
};
